/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package componentMerca;
import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
/**
 *
 * @author angel
 */
public class PanelPuestosVer extends javax.swing.JFrame {

    /**
     * Creates new form PanelPuestosVer
     */
    public PanelPuestosVer() {
        initComponents();
        cargarPuestosEnComboBox();
    }
    
    private void cargarPuestosEnComboBox() {
    // Limpia los items existentes (incluyendo los ficticios)
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    jComboBoxNumPuesto.setModel(model);
    
    // Configuración de la conexión
    String url = "jdbc:mysql://localhost:3306/mercadillo";
    String user = "root";
    String password = "";
    
    try (Connection conn = DriverManager.getConnection(url, user, password)) {
        String sql = "SELECT n_puesto FROM PUESTO ORDER BY n_puesto";
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            
            while (rs.next()) {
                model.addElement(String.valueOf(rs.getInt("n_puesto")));
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error al cargar puestos: " + ex.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}
    
    private void cargarNumerosPuesto() {
        // Configuración de la conexión
        String url = "jdbc:mysql://localhost:3306/mercadillo";
        String user = "root";
        String password = "";
        
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String sql = "SELECT n_puesto FROM PUESTO ORDER BY n_puesto";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            while (rs.next()) {
                model.addElement(String.valueOf(rs.getInt("n_puesto")));
            }
            
            jComboBoxNumPuesto.setModel(model);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar los números de puesto: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        jLabelNumPuesto = new javax.swing.JLabel();
        jButtonVerPuesto = new javax.swing.JButton();
        jButtonEditarPuesto = new javax.swing.JButton();
        jComboBoxNumPuesto = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelTitulo.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabelTitulo.setText("Ver/editar puestos");

        jLabelNumPuesto.setText("Numero de puesto:");

        jButtonVerPuesto.setText("Ver puesto");
        jButtonVerPuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerPuestoActionPerformed(evt);
            }
        });

        jButtonEditarPuesto.setText("Editar puesto");
        jButtonEditarPuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarPuestoActionPerformed(evt);
            }
        });

        jComboBoxNumPuesto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxNumPuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNumPuestoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(149, Short.MAX_VALUE)
                .addComponent(jLabelTitulo)
                .addGap(139, 139, 139))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelNumPuesto)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxNumPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonVerPuesto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEditarPuesto)
                        .addGap(66, 66, 66))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabelTitulo)
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumPuesto)
                    .addComponent(jComboBoxNumPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonVerPuesto)
                    .addComponent(jButtonEditarPuesto))
                .addGap(65, 65, 65))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVerPuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerPuestoActionPerformed
 String numeroPuesto = (String) jComboBoxNumPuesto.getSelectedItem();
        
        if (numeroPuesto == null || numeroPuesto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un número de puesto", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Configuración de la conexión
        String url = "jdbc:mysql://localhost:3306/mercadillo";
        String user = "root";
        String password = "";
        
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            // Consulta para obtener información del puesto y alquiler actual
            String sql = "SELECT p.n_puesto, p.metrosAncho, p.metrosLargo, "
            + "a.epigrafe, a.finicio, a.ffin, "
            + "c.nombre AS cliente_nombre, c.dni, "
            + "fp.nombre_tipo AS forma_pago "
            + "FROM PUESTO p "
            + "LEFT JOIN ALQUILER a ON p.n_puesto = a.n_puesto "
            + "LEFT JOIN CLIENTE c ON a.cod_cl = c.cod_cl "
            + "LEFT JOIN FORMA_PAGO fp ON a.cod_fp = fp.cod_fp "
            + "WHERE p.n_puesto = ?";
            
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, Integer.parseInt(numeroPuesto));
            
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                // Construir el mensaje con toda la información
                StringBuilder info = new StringBuilder();
                info.append("Información del Puesto #").append(rs.getInt("n_puesto")).append("\n\n");
                info.append("Dimensiones: ").append(rs.getDouble("metrosAncho"))
                    .append("m x ").append(rs.getDouble("metrosLargo")).append("m\n\n");
                
                if (rs.getString("epigrafe") != null) {
                    info.append("--- DATOS DE ALQUILER ---\n");
                    info.append("Cliente: ").append(rs.getString("cliente_nombre")).append("\n");
                    info.append("DNI: ").append(rs.getString("dni")).append("\n");
                    info.append("Epígrafe: ").append(rs.getString("epigrafe")).append("\n");
                    info.append("Fecha inicio: ").append(rs.getDate("finicio")).append("\n");
                    info.append("Fecha fin: ").append(rs.getDate("ffin")).append("\n");
                    info.append("Forma de pago: ").append(rs.getString("forma_pago")).append("\n");
                } else {
                    info.append("Este puesto no está actualmente alquilado.");
                }
                
                JOptionPane.showMessageDialog(this, info.toString(), 
                    "Información del Puesto", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró ningún puesto con ese número", 
                    "No encontrado", JOptionPane.WARNING_MESSAGE);
            }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al conectar con la base de datos: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }   
   
    }//GEN-LAST:event_jButtonVerPuestoActionPerformed

    private void jButtonEditarPuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarPuestoActionPerformed
        String numeroPuesto = (String) jComboBoxNumPuesto.getSelectedItem();
            
        if (numeroPuesto == null || numeroPuesto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un número de puesto", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Configuración de la conexión
        String url = "jdbc:mysql://localhost:3306/mercadillo";
        String user = "root";
        String password = "";
        
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            // Verificar si el puesto existe y obtener sus datos actuales
            String consultaSql = "SELECT metrosAncho, metrosLargo FROM PUESTO WHERE n_puesto = ?";
            PreparedStatement pstmt = conn.prepareStatement(consultaSql);
            pstmt.setInt(1, Integer.parseInt(numeroPuesto));
            
            ResultSet rs = pstmt.executeQuery();
            
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, 
                    "No se encontró ningún puesto con ese número", 
                    "No encontrado", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Guardar los valores actuales
            double anchoActual = rs.getDouble("metrosAncho");
            double largoActual = rs.getDouble("metrosLargo");
            
            // Cerrar recursos
            rs.close();
            pstmt.close();
            
            // Verificar si el puesto está alquilado
            String alquilerSql = "SELECT COUNT(*) as alquileres_activos FROM ALQUILER "
                    + "WHERE n_puesto = ? AND (ffin IS NULL OR ffin >= CURDATE())";
            try (PreparedStatement alquilerStmt = conn.prepareStatement(alquilerSql)) {
                alquilerStmt.setInt(1, Integer.parseInt(numeroPuesto));
                ResultSet alquilerRs = alquilerStmt.executeQuery();

                if (alquilerRs.next() && alquilerRs.getInt("alquileres_activos") > 0) {
                    JOptionPane.showMessageDialog(this, 
                        "No se puede editar un puesto que está actualmente alquilado", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            
            // Crear panel de edición
            JPanel panelEdicion = new JPanel(new GridLayout(3, 2, 5, 5));
            panelEdicion.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            
            JTextField anchoField = new JTextField(String.valueOf(anchoActual), 10);
            JTextField largoField = new JTextField(String.valueOf(largoActual), 10);
            
            panelEdicion.add(new JLabel("Ancho (metros):"));
            panelEdicion.add(anchoField);
            panelEdicion.add(new JLabel("Largo (metros):"));
            panelEdicion.add(largoField);
            
            // Mostrar diálogo de edición
            int resultado = JOptionPane.showConfirmDialog(
                this, 
                panelEdicion, 
                "Editar Puesto #" + numeroPuesto, 
                JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.PLAIN_MESSAGE);
            
            if (resultado == JOptionPane.OK_OPTION) {
                try {
                    double nuevoAncho = Double.parseDouble(anchoField.getText());
                    double nuevoLargo = Double.parseDouble(largoField.getText());
                    
                    // Validar dimensiones
                    if (nuevoAncho <= 0 || nuevoAncho > 17 || nuevoLargo <= 0 || nuevoLargo > 17) {
                        JOptionPane.showMessageDialog(this, 
                            "Las dimensiones deben ser mayores que 0 y menores o iguales a 17 metros", 
                            "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    // Actualizar en la base de datos
                    String actualizarSql = "UPDATE PUESTO SET metrosAncho = ?, metrosLargo = ? WHERE n_puesto = ?";
                    try (PreparedStatement updateStmt = conn.prepareStatement(actualizarSql)) {
                        updateStmt.setDouble(1, nuevoAncho);
                        updateStmt.setDouble(2, nuevoLargo);
                        updateStmt.setInt(3, Integer.parseInt(numeroPuesto));
                        
                        int filasActualizadas = updateStmt.executeUpdate();
                        
                        if (filasActualizadas > 0) {
                            JOptionPane.showMessageDialog(this, 
                                "Puesto actualizado correctamente", 
                                "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, 
                                "No se pudo actualizar el puesto", 
                                "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, 
                        "Las dimensiones deben ser valores numéricos", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al conectar con la base de datos: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }    
    }//GEN-LAST:event_jButtonEditarPuestoActionPerformed

    private void jComboBoxNumPuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNumPuestoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNumPuestoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelPuestosVer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelPuestosVer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelPuestosVer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelPuestosVer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelPuestosVer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEditarPuesto;
    private javax.swing.JButton jButtonVerPuesto;
    private javax.swing.JComboBox<String> jComboBoxNumPuesto;
    private javax.swing.JLabel jLabelNumPuesto;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
